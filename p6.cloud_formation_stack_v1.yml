AWSTemplateFormatVersion: "2010-09-09"
Description: Template to create the required infrastructure for the Ghost application

Parameters:
  VpcCidr:
    Type: String
    Description: The CIDR Block for the VPC
    Default: 10.10.0.0/16
  MyIP:
    Type: String
    Description: The CIDR Block for the My IP
    Default: 0.0.0.0/0
  ImageId:
    Type: String
    Description: 'Amazon Linux 2'
    Default: 'ami-0cff7528ff583bf9a'
  InstanceType:
    Type: String
    Description: Choosing  t2 micro because it is free
    Default: t2.micro
  KeyName:
    Description: SSH Keypair to login to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: ghost-ec2-pool    
  ProjectTag:
    Type: String
    Default: CloudX
  PartTag:
    Type: String
    Default: aminich_cloudx_lab_2
  Version:
    Type: String
    Default: 123
    
Mappings:
  SubnetMap:
    PublicSubnet01:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.10.1.0/24
      Name: public_a-p6
    PublicSubnet02:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.10.2.0/24
      Name: public_b-p6
    PublicSubnet03:
      AvailabilityZone: us-east-1c
      CidrBlock: 10.10.3.0/24
      Name: public_c-p6

Resources:

#### VPC, subnets, routing
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags: 
        - Key: Name
          Value: !Join ['-', ['cloudx-vpc', !Ref Version]]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !FindInMap [SubnetMap, PublicSubnet01, AvailabilityZone]
      CidrBlock: !FindInMap [SubnetMap, PublicSubnet01, CidrBlock]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !FindInMap [SubnetMap, PublicSubnet01, Name]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !FindInMap [SubnetMap, PublicSubnet02, AvailabilityZone]
      CidrBlock: !FindInMap [SubnetMap, PublicSubnet02, CidrBlock]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !FindInMap [SubnetMap, PublicSubnet02, Name]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag

  PublicSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !FindInMap [SubnetMap, PublicSubnet03, AvailabilityZone]
      CidrBlock: !FindInMap [SubnetMap, PublicSubnet03, CidrBlock]
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !FindInMap [SubnetMap, PublicSubnet03, Name]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag

  IGW: 
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: !Join ['-', ['cloudx-igw', !Ref Version]]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', ['public_rt', !Ref Version]]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

#### Security groups
  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', ['bastion', !Ref Version]]
      GroupDescription: allows access to bastion
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', ['bastion', !Ref Version]]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag
      SecurityGroupIngress:
        - Description: ingress_rule_1
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIP
      SecurityGroupEgress:
        - Description: egress_group_1
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0 

  EC2PoolSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', ['ec2_pool', !Ref Version]]
      GroupDescription: allows access to ec2 instances
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', ['ec2_pool', !Ref Version]]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0 

  AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', ['alb', !Ref Version]]
      GroupDescription: allows access to alb
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', ['alb', !Ref Version]]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag
      SecurityGroupIngress:
        - Description: rule_1
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyIP

  AlbSGEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref AlbSG
      Description: Allow all outbound traffic
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref EC2PoolSG

  EC2PoolSGIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2PoolSG
      Description: rule_1
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref BastionSG

  EC2PoolSGIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2PoolSG
      Description: rule_2
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      CidrIp: !Ref VpcCidr

  EC2PoolSGIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2PoolSG
      Description: rule_3
      IpProtocol: tcp
      FromPort: 2368
      ToPort: 2368
      SourceSecurityGroupId: !Ref AlbSG

  EfsSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', ['efs', !Ref Version]]
      GroupDescription: defines access to efs mount points
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', ['efs', !Ref Version]]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag
      SecurityGroupIngress:
        - Description: rule_1
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref EC2PoolSG
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: !Ref VpcCidr

#### roles
  GhostRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', ['ghost_app', !Ref Version]]
      Description: This IAM role now provides EC2 instances with access to the services
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Join ['-', ['ghost_app_policy', !Ref Version]]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:DescribeFileSystems
                  - elasticloadbalancing:DescribeLoadBalancers
                Resource: '*'
          
  GhostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Join ['-', ['ghost_app_profile', !Ref Version]]
      Path: "/"
      Roles: 
        - !Ref GhostRole








#### EFS filesystem

  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
        - TransitionToPrimaryStorageClass: AFTER_1_ACCESS
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      FileSystemTags:
        - Key: Name
          Value: !Join ['-', ['efs', !Ref Version]]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag

  MountTarget01:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EFSFileSystem
#      IpAddress: *.*.*.*
      SecurityGroups: 
        - !Ref EfsSG
      SubnetId: !Ref PublicSubnet01

  MountTarget02:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EFSFileSystem
#      IpAddress: *.*.*.*
      SecurityGroups: 
        - !Ref EfsSG
      SubnetId: !Ref PublicSubnet02

  MountTarget03:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EFSFileSystem
#      IpAddress: *.*.*.*
      SecurityGroups: 
        - !Ref EfsSG
      SubnetId: !Ref PublicSubnet03





#### Application load balancer
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: !Join ['-', ['ghost-ec2', !Ref Version]]
      TargetType: instance
      Port: 2368
      Protocol: HTTP
      ProtocolVersion: HTTP1
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['-', ['ghost-ec2', !Ref Version]]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

#  ListenerRule:
#    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
#    Properties:
#      Actions:
#        - Type: forward
#          TargetGroupArn: !Ref EC2TargetGroup
#      Conditions: 
#        - RuleCondition
#      ListenerArn: !Ref ALBListener
#      Priority: 100

#  ListenerRule:
#    Type: AWS::ElasticLoadBalancingV2::ListenerRule
#    Properties:
#      Priority: "1"
#      ListenerArn: !Ref ALBListener
#      Conditions: 
#        - 
#          Field: "source-ip"
#          Values: 
#            - "*.*.*.*"
#      Actions: 
#        - 
#          Type: "forward"
#          TargetGroupArn: !Ref EC2TargetGroup
#          Order: 1
#          ForwardConfig: 
#            TargetGroups: 
#              - 
#                TargetGroupArn: !Ref EC2TargetGroup
#                Weight: 100
#            TargetGroupStickinessConfig: 
#              Enabled: false

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
        - !Ref PublicSubnet03
      SecurityGroups:
        - Ref: AlbSG
      Tags:
        - Key: Name
          Value: !Join ['-', ['cloudx-lb', !Ref Version]]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag

#### Launch Template
  GhostLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Join ['-', ['ghost', !Ref Version]] 
      LaunchTemplateData: 
        InstanceType: !Ref InstanceType
        ImageId: !Ref ImageId
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - Ref: EC2PoolSG
        IamInstanceProfile: !Ref GhostInstanceProfile
        UserData:
          Fn::Base64: !Join
            - "\n"
            - - '#!/bin/bash -xe'
              - 'exec > >(tee /var/log/cloud-init-output.log|logger -t user-data -s 2>/dev/console) 2>&1'
              - 'REGION=$(/usr/bin/curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed "s/[a-z]$//")'
              - 'EFS_ID=$(aws efs describe-file-systems --query "FileSystems[?Name==`ghost_content`].FileSystemId" --region $REGION --output text)'
              - 'LB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arn $LBARN  --region $REGION --query "LoadBalancers[0].DNSName" --output text)'
              - '### Install pre-reqs'
              - 'curl -sL https://rpm.nodesource.com/setup_14.x | sudo bash -'
              - 'yum install -y nodejs amazon-efs-utils'
              - 'npm install ghost-cli@latest -g'
              - 'adduser ghost_user'
              - 'usermod -aG wheel ghost_user'
              - 'cd /home/ghost_user/'
              - 'sudo -u ghost_user ghost install local'
              - '### EFS mount'
              - 'sudo -u ghost_user mkdir -p /home/ghost_user/ghost/content'
              - 'mount -t efs -o tls $EFS_ID:/ /home/ghost_user/ghost/content'
              - 'cat << EOF > config.development.json'
              - '{"url": "http://${LB_DNS_NAME}","server":{"port":2368,"host": "0.0.0.0"},"database":{"client": "sqlite3","connection":{"filename": "/home/ghost_user/ghost/content/data/ghost-local.db"}},"mail":{"transport":"Direct"},"logging":{"transports":["file","stdout"]},"process":"local","paths":{"contentPath":"/home/ghost_user/content"}}'
              - 'EOF'
              - 'sudo -u ghost_user ghost stop'
              - 'sudo -u ghost_user ghost start'
                    
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: !Join ['-', ['ghost', !Ref Version]]
            - Key: Project
              Value: !Ref ProjectTag
            - Key: Part
              Value: !Ref PartTag

#### Auto-scaling group
  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Join ['-', ['ghost_ec2_pool', !Ref Version]]
#      AvailabilityZones: 
#        - us-east-1a
#        - us-east-1b
#        - us-east-1c
#      Cooldown: String
      VPCZoneIdentifier:   
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
        - !Ref PublicSubnet03
      DesiredCapacity: 3
      DesiredCapacityType: units
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref GhostLaunchTemplate
        Version: !GetAtt GhostLaunchTemplate.LatestVersionNumber
#      LoadBalancerNames: 
#        - ApplicationLoadBalancer
      MaxSize: 3
      MinSize: 1
      TargetGroupARNs: 
        - !Ref EC2TargetGroup
      Tags:
        - Key: Name
          Value: !Join ['-', ['ghost_ec2_pool', !Ref Version]]
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref ProjectTag
          PropagateAtLaunch: true
        - Key: Part
          Value: !Ref PartTag
          PropagateAtLaunch: true

#### EC2 bastion
  Bastion:
    Type: 'AWS::EC2::Instance'
    Properties:
#      AvailabilityZone: us-east-1a
      InstanceType: !Ref InstanceType
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - Ref: BastionSG
      IamInstanceProfile: !Ref GhostInstanceProfile
      SubnetId: !Ref PublicSubnet01
#      BlockDeviceMappings:
#        - DeviceName: /dev/sda1
#          Ebs:
#            VolumeSize: 250
      Tags:
        - Key: Name
          Value: !Join ['-', ['bastion', !Ref Version]]
        - Key: Project
          Value: !Ref ProjectTag
        - Key: Part
          Value: !Ref PartTag

  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref Bastion          
          
          
          
          
          
          
          
          


Outputs:
  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
    Export: 
      Name: !Sub "${AWS::StackName}-VPCID"

  LoadBalancerDnsName:
    Description: LoadBalancerDnsName
    Value: !GetAtt ApplicationLoadBalancer.DNSName
